<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AggregateDoesNotExistExceptionContextRequired" xml:space="preserve">
    <value>The context in which the aggregate was requested must be provided.</value>
  </data>
  <data name="AggregateDoesNotExistExceptionMessage" xml:space="preserve">
    <value>An empty reference for aggregate type {0} cannot be retrieved.</value>
  </data>
  <data name="AggregateEventMismatchExceptionAggregateRequired" xml:space="preserve">
    <value>The aggregate from which the request originated must be provided.</value>
  </data>
  <data name="AggregateEventMismatchExceptionEventAggregateRequired" xml:space="preserve">
    <value>The aggregate that mismatches with the aggregate from which the request originated must be provided.</value>
  </data>
  <data name="AggregateEventMismatchExceptionMessage" xml:space="preserve">
    <value>Event {3:p}, version {5} of type {4} does not apply to aggregate {0:p}, version {2} of type {1}.</value>
  </data>
  <data name="AggregateEventSequenceUnorderedExceptionAggregateRequired" xml:space="preserve">
    <value>The aggregate from which the request originated must be provided.</value>
  </data>
  <data name="AggregateEventSequenceUnorderedExceptionEventsRequired" xml:space="preserve">
    <value>The events that are intended to be applied to the aggregate must be provided.</value>
  </data>
  <data name="AggregateEventSequenceUnorderedExceptionMessage" xml:space="preserve">
    <value>Aggregate of type {2} with an ID of {0:p} and a version of {1} cannot accept the proposed state from history as the sequence is unordered.</value>
  </data>
  <data name="AggregateHasUncommittedChangesExceptionMessage" xml:space="preserve">
    <value>Aggregate of type {2} with an ID of {0:p} and a version of {1} cannot accept its state from history as it current possesses uncommitted changes.</value>
  </data>
  <data name="AggregateHistoryInvalidForStateExceptionMessage" xml:space="preserve">
    <value>Aggregate of type {2} with an ID of {0:p} and a version of {1} cannot accept the proposed sequence as it starts from version {3}.</value>
  </data>
  <data name="AggregateInvariantsNotSatisfiedDomainExceptionMessage" xml:space="preserve">
    <value>Request {0} could not be fulfilled due to a failure to satisfy the following invariants as defined by aggregate {1}:

{2}</value>
  </data>
  <data name="AggregateReferenceMismatchExceptionMessage" xml:space="preserve">
    <value>Reference for aggregate {0:p} of type {1} cannot be converted type {2}.</value>
  </data>
  <data name="AggregateReferenceMismatchExceptionReferenceRequired" xml:space="preserve">
    <value>The reference that serves as the subject of the conversion must be provided.</value>
  </data>
  <data name="AggregateRootExtensionsCoordinateAsyncAggregateRequired" xml:space="preserve">
    <value>The aggregate that serves as the context for coordination must be provided.</value>
  </data>
  <data name="AggregateRootExtensionsSaveDestinationRequired" xml:space="preserve">
    <value>The destination must be provided.</value>
  </data>
  <data name="AggregateRootExtensionsToReferenceAggregateRequired" xml:space="preserve">
    <value>The aggregate must be provided.</value>
  </data>
  <data name="AggregateRootIdRequired" xml:space="preserve">
    <value>A non-empty ID for the aggregate must be provided.</value>
  </data>
  <data name="DomainEventAggregateReferenceRequired" xml:space="preserve">
    <value>A reference to the aggregate from which the domain event was raised must be provided.</value>
  </data>
  <data name="DomainEventAggregateRequired" xml:space="preserve">
    <value>A versioned reference for the aggregate must be provided.</value>
  </data>
  <data name="EnsureReferenceIsNotEmptyMessage" xml:space="preserve">
    <value>A non-empty reference of aggregate type {0} is required.</value>
  </data>
  <data name="EnsureReferenceIsOfTypeMessage" xml:space="preserve">
    <value>The reference provided is for an aggregate of type {0}.  {1} is required.</value>
  </data>
  <data name="EventCentricAggregateRootStateChangesDenied" xml:space="preserve">
    <value>Changed to the state of an aggregate of type {0} must be made through ApplyChanges.</value>
  </data>
  <data name="ProjectionAggregateRequired" xml:space="preserve">
    <value>A reference to the aggregate must be provided.</value>
  </data>
  <data name="ReferenceCreateAggregateRequired" xml:space="preserve">
    <value>The aggregate to be referenced must be provided.</value>
  </data>
  <data name="ReferenceCreateTypeRequired" xml:space="preserve">
    <value>The type of the aggregate to be referenced must be provided.</value>
  </data>
  <data name="ReferenceDeserializeTypeTypeIndeterminate" xml:space="preserve">
    <value>The type of the reference could not be determined.</value>
  </data>
  <data name="ReferenceExtensionsCoordinateAsyncReferenceRequired" xml:space="preserve">
    <value>The reference that serves as the context for coordination must be provided.</value>
  </data>
  <data name="ReferenceExtensionsToUnversionedReferenceRequired" xml:space="preserve">
    <value>The reference to be unversioned must be provided.</value>
  </data>
  <data name="ReferenceIdRequired" xml:space="preserve">
    <value>A non-empty ID for the aggregate this reference represents must be provided.</value>
  </data>
  <data name="ReferenceTypeRequired" xml:space="preserve">
    <value>The type of the reference must be concrete.</value>
  </data>
  <data name="SignedVersionPreviousFooterInvalid" xml:space="preserve">
    <value>The footer of previous version {0} is invalid.</value>
  </data>
  <data name="SignedVersionPreviousRequired" xml:space="preserve">
    <value>The previous version must be provided.</value>
  </data>
  <data name="VersionedReferenceIdRequired" xml:space="preserve">
    <value>A non-empty ID for the aggregate this versioned reference represents must be provided.</value>
  </data>
  <data name="VersionedReferenceVersionRequired" xml:space="preserve">
    <value>The version of the aggregate must be provided.</value>
  </data>
</root>