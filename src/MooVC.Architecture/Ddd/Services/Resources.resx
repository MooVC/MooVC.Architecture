<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AggregateConflictDetectedExceptionAggregateRequired" xml:space="preserve">
    <value>The aggregate in which they conflict was detected must be provided.</value>
  </data>
  <data name="AggregateConflictDetectedExceptionExistingEntryMessage" xml:space="preserve">
    <value>A conflict has been detected while attempting to commit changes to aggregate of type {1} with an ID of {0:p}.  Version {2} was received, but version {3} has been previously committed.</value>
  </data>
  <data name="AggregateConflictDetectedExceptionNoExistingEntryMessage" xml:space="preserve">
    <value>A conflict has been detected while attempting to commit changes to aggregate of type {1} with an ID of {0:p}.  Version {2} was received, but the initial version was expected.</value>
  </data>
  <data name="AggregateConflictDetectedExceptionPersistedRequired" xml:space="preserve">
    <value>The version of the persisted aggregate in which the conflict detection must be provided.</value>
  </data>
  <data name="AggregateConflictDetectedExceptionReceivedRequired" xml:space="preserve">
    <value>The version of the aggregate received that resulted in the conflict detection must be provided.</value>
  </data>
  <data name="AggregateEventArgsAggregateRequired" xml:space="preserve">
    <value>The aggregate to which the event relates must be provided.</value>
  </data>
  <data name="AggregateNotFoundExceptionAggregateRequired" xml:space="preserve">
    <value>A reference to the aggregate that was sought must be provided.</value>
  </data>
  <data name="AggregateNotFoundExceptionContextRequired" xml:space="preserve">
    <value>The context in which the aggregate was requested must be provided.</value>
  </data>
  <data name="AggregateNotFoundExceptionMessage" xml:space="preserve">
    <value>There is currently no aggregate of type {1} with an ID of {0:p}.</value>
  </data>
  <data name="AggregateSavingAbortedAsyncEventArgsReasonRequired" xml:space="preserve">
    <value>The reason for abort must be provided.</value>
  </data>
  <data name="AggregateVersionNotFoundExceptionAggregateRequired" xml:space="preserve">
    <value>The reference to the aggregate requested must be provided.</value>
  </data>
  <data name="AggregateVersionNotFoundExceptionContextRequired" xml:space="preserve">
    <value>The context in which the aggregate version was requested must be provided.</value>
  </data>
  <data name="AggregateVersionNotFoundExceptionMessage" xml:space="preserve">
    <value>Version {2} of aggregate type {1} with an ID of {0:p} could not be found.</value>
  </data>
  <data name="AtomicUnitDistinctAggregateVersionRequired" xml:space="preserve">
    <value>The atomic unit must only contain changes relating to a single version increment of a single aggregate.</value>
  </data>
  <data name="AtomicUnitDistinctContextRequired" xml:space="preserve">
    <value>The atomic unit must only contain changes triggered in the context of a single operation.</value>
  </data>
  <data name="AtomicUnitEventsRequired" xml:space="preserve">
    <value>The atomic unit must contain one or more domain events.</value>
  </data>
  <data name="BusOnPublishedAsyncFailure" xml:space="preserve">
    <value>A failure has prevented one or more listeners for publications from successfully handling a notification.</value>
  </data>
  <data name="CoordinatedContextHandlerRepositoryRequired" xml:space="preserve">
    <value>The repository must be provided.</value>
  </data>
  <data name="CoordinatedGenerateHandlerRepositoryRequired" xml:space="preserve">
    <value>The repository must be provided.</value>
  </data>
  <data name="CoordinatedHandlerCoordinatorRequired" xml:space="preserve">
    <value>The coordinator, which provides contextual mutual exclusive access, must be provided.</value>
  </data>
  <data name="DomainEventPropagatorBusRequired" xml:space="preserve">
    <value>The bus to which the events are to be propagated must be provided.</value>
  </data>
  <data name="DomainEventPropagatorReconcilerRequired" xml:space="preserve">
    <value>The reconciler from which the events are to be propagated must be provided.</value>
  </data>
  <data name="DomainEventPropagatorRepositoryRequired" xml:space="preserve">
    <value>The repository from which the events are to be propagated must be provided.</value>
  </data>
  <data name="DomainEventsMissingExceptionMessage" xml:space="preserve">
    <value>The domain events that form the basis of the aggregate must be provided.</value>
  </data>
  <data name="DomainEventsUnhandledEventArgsHandlerRequired" xml:space="preserve">
    <value>The handler for the unhandled events must be provided.</value>
  </data>
  <data name="PersistentBusPublishFailure" xml:space="preserve">
    <value>A failure has prevented the succesful publication of atomic unit {0:p}.</value>
  </data>
  <data name="PersistentBusStoreRequired" xml:space="preserve">
    <value>The storage that support persistence of domain events published via the bus must be provided.</value>
  </data>
  <data name="RepositoryOnAbortedAsyncFailure" xml:space="preserve">
    <value>A failure has prevented one or more listeners for persistence abort from successfully handling a notification.</value>
  </data>
  <data name="RepositoryOnSavedAsyncFailure" xml:space="preserve">
    <value>A failure has prevented one or more listeners for persistence completion from successfully handling a notification.</value>
  </data>
  <data name="SynchronousRepositoryClonerRequired" xml:space="preserve">
    <value>The cloner that ensures mutual exclusive access to aggregates stored within the repository must be provided.</value>
  </data>
</root>