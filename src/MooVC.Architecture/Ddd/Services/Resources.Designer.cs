//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MooVC.Architecture.Ddd.Services {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MooVC.Architecture.Ddd.Services.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The aggregate in which they conflict was detected must be provided..
        /// </summary>
        internal static string AggregateConflictDetectedExceptionAggregateRequired {
            get {
                return ResourceManager.GetString("AggregateConflictDetectedExceptionAggregateRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A conflict has been detected while attempting to commit changes to aggregate of type {1} with an ID of {0:p}.  Version {2} was received, but version {3} has been previously committed..
        /// </summary>
        internal static string AggregateConflictDetectedExceptionExistingEntryMessage {
            get {
                return ResourceManager.GetString("AggregateConflictDetectedExceptionExistingEntryMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A conflict has been detected while attempting to commit changes to aggregate of type {1} with an ID of {0:p}.  Version {2} was received, but the initial version was expected..
        /// </summary>
        internal static string AggregateConflictDetectedExceptionNoExistingEntryMessage {
            get {
                return ResourceManager.GetString("AggregateConflictDetectedExceptionNoExistingEntryMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of the persisted aggregate in which the conflict detection must be provided..
        /// </summary>
        internal static string AggregateConflictDetectedExceptionPersistedRequired {
            get {
                return ResourceManager.GetString("AggregateConflictDetectedExceptionPersistedRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of the aggregate received that resulted in the conflict detection must be provided..
        /// </summary>
        internal static string AggregateConflictDetectedExceptionReceivedRequired {
            get {
                return ResourceManager.GetString("AggregateConflictDetectedExceptionReceivedRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The aggregate to which the event relates must be provided..
        /// </summary>
        internal static string AggregateEventArgsAggregateRequired {
            get {
                return ResourceManager.GetString("AggregateEventArgsAggregateRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reference to the aggregate that was sought must be provided..
        /// </summary>
        internal static string AggregateNotFoundExceptionAggregateRequired {
            get {
                return ResourceManager.GetString("AggregateNotFoundExceptionAggregateRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The context in which the aggregate was requested must be provided..
        /// </summary>
        internal static string AggregateNotFoundExceptionContextRequired {
            get {
                return ResourceManager.GetString("AggregateNotFoundExceptionContextRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is currently no aggregate of type {1} with an ID of {0:p}..
        /// </summary>
        internal static string AggregateNotFoundExceptionMessage {
            get {
                return ResourceManager.GetString("AggregateNotFoundExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reference to the aggregate requested must be provided..
        /// </summary>
        internal static string AggregateVersionNotFoundExceptionAggregateRequired {
            get {
                return ResourceManager.GetString("AggregateVersionNotFoundExceptionAggregateRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The context in which the aggregate version was requested must be provided..
        /// </summary>
        internal static string AggregateVersionNotFoundExceptionContextRequired {
            get {
                return ResourceManager.GetString("AggregateVersionNotFoundExceptionContextRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version {2} of aggregate type {1} with an ID of {0:p} could not be found..
        /// </summary>
        internal static string AggregateVersionNotFoundExceptionMessage {
            get {
                return ResourceManager.GetString("AggregateVersionNotFoundExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The atomic unit must only contain changes relating to a single version increment of a single aggregate..
        /// </summary>
        internal static string AtomicUnitDistinctAggregateVersionRequired {
            get {
                return ResourceManager.GetString("AtomicUnitDistinctAggregateVersionRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The atomic unit must only contain changes triggered in the context of a single operation..
        /// </summary>
        internal static string AtomicUnitDistinctContextRequired {
            get {
                return ResourceManager.GetString("AtomicUnitDistinctContextRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The atomic unit must contain one or more domain events..
        /// </summary>
        internal static string AtomicUnitEventsRequired {
            get {
                return ResourceManager.GetString("AtomicUnitEventsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A failure has prevented one or more listeners for publications from successfully handling a notification..
        /// </summary>
        internal static string BusOnPublishedAsyncFailure {
            get {
                return ResourceManager.GetString("BusOnPublishedAsyncFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The repository must be provided..
        /// </summary>
        internal static string CoordinatedContextHandlerRepositoryRequired {
            get {
                return ResourceManager.GetString("CoordinatedContextHandlerRepositoryRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The repository must be provided..
        /// </summary>
        internal static string CoordinatedGenerateHandlerRepositoryRequired {
            get {
                return ResourceManager.GetString("CoordinatedGenerateHandlerRepositoryRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The coordinator, which provides contextual mutual exclusive access, must be provided..
        /// </summary>
        internal static string CoordinatedHandlerCoordinatorRequired {
            get {
                return ResourceManager.GetString("CoordinatedHandlerCoordinatorRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bus to which the events are to be propagated must be provided..
        /// </summary>
        internal static string DomainEventPropagatorBusRequired {
            get {
                return ResourceManager.GetString("DomainEventPropagatorBusRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reconciler from which the events are to be propagated must be provided..
        /// </summary>
        internal static string DomainEventPropagatorReconcilerRequired {
            get {
                return ResourceManager.GetString("DomainEventPropagatorReconcilerRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The repository from which the events are to be propagated must be provided..
        /// </summary>
        internal static string DomainEventPropagatorRepositoryRequired {
            get {
                return ResourceManager.GetString("DomainEventPropagatorRepositoryRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The domain events that form the basis of the aggregate must be provided..
        /// </summary>
        internal static string DomainEventsMissingExceptionMessage {
            get {
                return ResourceManager.GetString("DomainEventsMissingExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The handler for the unhandled events must be provided..
        /// </summary>
        internal static string DomainEventsUnhandledEventArgsHandlerRequired {
            get {
                return ResourceManager.GetString("DomainEventsUnhandledEventArgsHandlerRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A failure has prevented the succesful publication of atomic unit {0:p}..
        /// </summary>
        internal static string PersistentBusPublishFailure {
            get {
                return ResourceManager.GetString("PersistentBusPublishFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The storage that support persistence of domain events published via the bus must be provided..
        /// </summary>
        internal static string PersistentBusStoreRequired {
            get {
                return ResourceManager.GetString("PersistentBusStoreRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A failure has prevented one or more listeners for persistence completion from successfully handling a notification..
        /// </summary>
        internal static string RepositoryOnAggregateSavedAsyncFailure {
            get {
                return ResourceManager.GetString("RepositoryOnAggregateSavedAsyncFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cloner that ensures mutual exclusive access to aggregates stored within the repository must be provided..
        /// </summary>
        internal static string SynchronousRepositoryClonerRequired {
            get {
                return ResourceManager.GetString("SynchronousRepositoryClonerRequired", resourceCulture);
            }
        }
    }
}
