//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MooVC.Architecture.Ddd.Services.Reconciliation {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MooVC.Architecture.Ddd.Services.Reconciliation.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reference to the aggregate from which conflicts were detected must be provided..
        /// </summary>
        internal static string AggregateConflictDetectedEventArgsAggregateRequired {
            get {
                return ResourceManager.GetString("AggregateConflictDetectedEventArgsAggregateRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The events within which conflicts were detected must be provided..
        /// </summary>
        internal static string AggregateConflictDetectedEventArgsEventsRequired {
            get {
                return ResourceManager.GetString("AggregateConflictDetectedEventArgsEventsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version at which conflicts were detected must be provided..
        /// </summary>
        internal static string AggregateConflictDetectedEventArgsNextRequired {
            get {
                return ResourceManager.GetString("AggregateConflictDetectedEventArgsNextRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version from which conflicts were detected must be provided..
        /// </summary>
        internal static string AggregateConflictDetectedEventArgsPreviousRequired {
            get {
                return ResourceManager.GetString("AggregateConflictDetectedEventArgsPreviousRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A conflict has been detected while attempting to commit changes to aggregate of type {1} with an ID of {0:p}.  Version {2} was received, but version {3} has been previously committed..
        /// </summary>
        internal static string AggregateConflictDetectedExceptionExistingEntryMessage {
            get {
                return ResourceManager.GetString("AggregateConflictDetectedExceptionExistingEntryMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A conflict has been detected while attempting to commit changes to aggregate of type {1} with an ID of {0:p}.  Version {2} was received, but the initial version was expected..
        /// </summary>
        internal static string AggregateConflictDetectedExceptionNoExistingEntryMessage {
            get {
                return ResourceManager.GetString("AggregateConflictDetectedExceptionNoExistingEntryMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is currently no aggregate of type {1} with an ID of {0:p}..
        /// </summary>
        internal static string AggregateNotFoundExceptionMessage {
            get {
                return ResourceManager.GetString("AggregateNotFoundExceptionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reference to the aggregate that was successfull reconciled must be provided..
        /// </summary>
        internal static string AggregateReconciledEventArgsAggregateRequired {
            get {
                return ResourceManager.GetString("AggregateReconciledEventArgsAggregateRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The events that were successfully reconciled must be provided..
        /// </summary>
        internal static string AggregateReconciledEventArgsEventsRequired {
            get {
                return ResourceManager.GetString("AggregateReconciledEventArgsEventsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The factory from which aggregate type specific reconcilation proxies are produced must be provided..
        /// </summary>
        internal static string DefaultAggregateReconcilerFactoryRequired {
            get {
                return ResourceManager.GetString("DefaultAggregateReconcilerFactoryRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The store from which events are to be reconciled must be provided..
        /// </summary>
        internal static string DefaultEventReconcilerEventStoreRequired {
            get {
                return ResourceManager.GetString("DefaultEventReconcilerEventStoreRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The reconciler to be used to reconciled events must be provided..
        /// </summary>
        internal static string DefaultEventReconcilerReconcilerRequired {
            get {
                return ResourceManager.GetString("DefaultEventReconcilerReconcilerRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The aggregate reconciler must be provided..
        /// </summary>
        internal static string DefaultReconciliationOrchestratorAggregateReconcilerRequired {
            get {
                return ResourceManager.GetString("DefaultReconciliationOrchestratorAggregateReconcilerRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source from which the aggregates are obtained must be provided..
        /// </summary>
        internal static string DefaultReconciliationOrchestratorAggregateSourceRequired {
            get {
                return ResourceManager.GetString("DefaultReconciliationOrchestratorAggregateSourceRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The event reconciler must be provided..
        /// </summary>
        internal static string DefaultReconciliationOrchestratorEventReconcilerRequired {
            get {
                return ResourceManager.GetString("DefaultReconciliationOrchestratorEventReconcilerRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The factory to be used to generate a new sequence must be provided..
        /// </summary>
        internal static string DefaultReconciliationOrchestratorSequenceFactoryRequired {
            get {
                return ResourceManager.GetString("DefaultReconciliationOrchestratorSequenceFactoryRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The store reponsible for tracking the event sequence must be provided..
        /// </summary>
        internal static string DefaultReconciliationOrchestratorSequenceStoreRequired {
            get {
                return ResourceManager.GetString("DefaultReconciliationOrchestratorSequenceStoreRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source responsible for providing the snapshots must be provided..
        /// </summary>
        internal static string DefaultReconciliationOrchestratorSnapshotSourceRequired {
            get {
                return ResourceManager.GetString("DefaultReconciliationOrchestratorSnapshotSourceRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The events must be provided..
        /// </summary>
        internal static string EventReconciliationEventArgsEventsRequired {
            get {
                return ResourceManager.GetString("EventReconciliationEventArgsEventsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sequence of the snapshot must be provided..
        /// </summary>
        internal static string SnapshotRestorationCompletedEventArgsSequenceRequired {
            get {
                return ResourceManager.GetString("SnapshotRestorationCompletedEventArgsSequenceRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A type of the aggregate for which reconciliation is not supported must be provided..
        /// </summary>
        internal static string UnsupportedAggregateTypeDetectedEventArgsTypeRequired {
            get {
                return ResourceManager.GetString("UnsupportedAggregateTypeDetectedEventArgsTypeRequired", resourceCulture);
            }
        }
    }
}
